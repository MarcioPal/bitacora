<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>